'use strict';

document.addEventListener('DOMContentLoaded', function () {
    var cards = document.querySelectorAll('[data-card=""]'),
        tabs = document.querySelectorAll('[data-tab-open]'),
        showMore = document.querySelector('[data-show-props]');

    if (showMore) {
        showMore.addEventListener('click', function (e) {
            e.preventDefault();
            var hiddenItems = document.querySelectorAll('[data-hidden-prop="true"]');
            if (showMore.classList.contains('active')) {
                hiddenItems.forEach(function (element) {
                    element.classList.remove('hidden');
                });
                showMore.classList.remove('active');
                showMore.querySelector('span').innerText = 'Развернуть';
            } else {
                hiddenItems.forEach(function (element) {
                    element.classList.add('hidden');
                });
                showMore.classList.add('active');
                showMore.querySelector('span').innerText = 'Свернуть';
            }
        });
    }

    if (cards) {
        cards.forEach(function (card) {
            card.addEventListener('mousemove', startMove);
            card.addEventListener('mouseout', stopMove);
            function startMove(e) {
                var height = this.offsetHeight,
                    width = this.offsetWidth;
                this.style.transform = 'translateY(' + (e.offsetY - height) / 50 + 'px) translateX(' + (e.offsetX - width) / 50 + 'px)';
            };

            function stopMove() {
                this.style.transform = 'translate(0, 0)';
            };
        });
    }
    if (tabs) {
        tabs.forEach(function (tab) {
            tab.addEventListener('click', function (e) {
                e.preventDefault();
                var id = this.dataset.tabOpen,
                    parentBlock = this.closest('.tabs-wrapper'),
                    tabsBlocks = parentBlock.querySelectorAll('[data-tab]'),
                    tabsButtons = parentBlock.querySelectorAll('[data-tab-open]');
                tabsBlocks.forEach(function (block) {
                    block.classList.remove('active');
                });
                tabsButtons.forEach(function (button) {
                    button.classList.remove('active');
                });
                this.classList.add('active');
                document.querySelector('[data-tab="' + id + '"]').classList.add('active');
            });
        });
    }
    $('[data-modal]').iziModal();
    $('[data-modal-open]').on('click', function (e) {
        e.preventDefault();
        var id = $(this).attr('data-modal-open');
        console.log(id);
        $('[data-modal=' + id + ']').iziModal('open');
    });
    $('.filter-range').each(function (i, elem) {
        var range = $(elem).find('.js-range-from-to'),
            inputFrom = $(elem).find('[data-from]'),
            inputTo = $(elem).find('[data-to]');
        $(range).ionRangeSlider({
            min: $('.js-range-from-to').data('min'),
            max: $('.js-range-from-to').data('max'),
            from: $('.js-range-from-to').data('from'),
            to: $('.js-range-from-to').data('to'),
            type: 'double',
            onChange: function onChange(data) {
                $(inputTo).val(data.to_pretty);
                $(inputFrom).val(data.from_pretty);
            }
        });
    });
    $('.filter-block__title').on('click', function () {
        $(this).toggleClass('active');
        $(this).closest('.filter-block').find('.filter-block__content').slideToggle();
    });

    $('.select').niceSelect();

    $('.slider').each(function (i, slider) {
        var slidesToShow = +slider.dataset.count,
            slides = $(slider).find('.slider__list'),
            prevArrow = $(slider).find('[data-slider-arrow="prev"]'),
            nextArrow = $(slider).find('[data-slider-arrow="next"]');
        slides.slick({
            slidesToShow: slidesToShow,
            prevArrow: prevArrow,
            nextArrow: nextArrow,
            responsive: [{
                breakpoint: 1600,
                settings: {
                    slidesToShow: slidesToShow - 1
                }
            }, {
                breakpoint: 1440,
                settings: {
                    slidesToShow: slidesToShow - 2
                }
            }, {
                breakpoint: 1025,
                settings: {
                    variableWidth: true
                }
            }]
        });
    });

    $('[data-filter-toggle]').on('click', function () {
        $('.filter__wrapper').slideToggle();
    });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdC5qcyJdLCJuYW1lcyI6WyJkb2N1bWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJjYXJkcyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJ0YWJzIiwic2hvd01vcmUiLCJxdWVyeVNlbGVjdG9yIiwiZSIsInByZXZlbnREZWZhdWx0IiwiaGlkZGVuSXRlbXMiLCJjbGFzc0xpc3QiLCJjb250YWlucyIsImZvckVhY2giLCJlbGVtZW50IiwicmVtb3ZlIiwiaW5uZXJUZXh0IiwiYWRkIiwiY2FyZCIsInN0YXJ0TW92ZSIsInN0b3BNb3ZlIiwiaGVpZ2h0Iiwib2Zmc2V0SGVpZ2h0Iiwid2lkdGgiLCJvZmZzZXRXaWR0aCIsInN0eWxlIiwidHJhbnNmb3JtIiwib2Zmc2V0WSIsIm9mZnNldFgiLCJ0YWIiLCJpZCIsImRhdGFzZXQiLCJ0YWJPcGVuIiwicGFyZW50QmxvY2siLCJjbG9zZXN0IiwidGFic0Jsb2NrcyIsInRhYnNCdXR0b25zIiwiYmxvY2siLCJidXR0b24iLCIkIiwiaXppTW9kYWwiLCJvbiIsImF0dHIiLCJjb25zb2xlIiwibG9nIiwiZWFjaCIsImkiLCJlbGVtIiwicmFuZ2UiLCJmaW5kIiwiaW5wdXRGcm9tIiwiaW5wdXRUbyIsImlvblJhbmdlU2xpZGVyIiwibWluIiwiZGF0YSIsIm1heCIsImZyb20iLCJ0byIsInR5cGUiLCJvbkNoYW5nZSIsInZhbCIsInRvX3ByZXR0eSIsImZyb21fcHJldHR5IiwidG9nZ2xlQ2xhc3MiLCJzbGlkZVRvZ2dsZSIsIm5pY2VTZWxlY3QiLCJzbGlkZXIiLCJzbGlkZXNUb1Nob3ciLCJjb3VudCIsInNsaWRlcyIsInByZXZBcnJvdyIsIm5leHRBcnJvdyIsInNsaWNrIiwicmVzcG9uc2l2ZSIsImJyZWFrcG9pbnQiLCJzZXR0aW5ncyIsInZhcmlhYmxlV2lkdGgiXSwibWFwcGluZ3MiOiI7O0FBQUFBLFNBQVNDLGdCQUFULENBQTBCLGtCQUExQixFQUE2QyxZQUFVO0FBQ25ELFFBQU1DLFFBQVFGLFNBQVNH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LFdBQXRCO0FBQ0gsS0FGRDtBQUlILENBOUhEIiwiZmlsZSI6InNjcmlwdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLGZ1bmN0aW9uKCl7XHJcbiAgICBjb25zdCBjYXJkcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLWNhcmQ9XCJcIl0nKSxcclxuICAgICAgICAgIHRhYnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS10YWItb3Blbl0nKSxcclxuICAgICAgICAgIHNob3dNb3JlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEtc2hvdy1wcm9wc10nKVxyXG5cclxuICAgIGlmKHNob3dNb3JlKXtcclxuICAgICAgICBzaG93TW9yZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGUgPT4ge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGhpZGRlbkl0ZW1zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtaGlkZGVuLXByb3A9XCJ0cnVlXCJdJylcclxuICAgICAgICAgICAgaWYoc2hvd01vcmUuY2xhc3NMaXN0LmNvbnRhaW5zKCdhY3RpdmUnKSl7XHJcbiAgICAgICAgICAgICAgICBoaWRkZW5JdGVtcy5mb3JFYWNoKCBlbGVtZW50ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBzaG93TW9yZS5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcclxuICAgICAgICAgICAgICAgIHNob3dNb3JlLnF1ZXJ5U2VsZWN0b3IoJ3NwYW4nKS5pbm5lclRleHQgPSAn0KDQsNC30LLQtdGA0L3Rg9GC0YwnO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaGlkZGVuSXRlbXMuZm9yRWFjaCggZWxlbWVudCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgc2hvd01vcmUuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgICAgICBzaG93TW9yZS5xdWVyeVNlbGVjdG9yKCdzcGFuJykuaW5uZXJUZXh0ID0gJ9Ch0LLQtdGA0L3Rg9GC0YwnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYoY2FyZHMpe1xyXG4gICAgICAgIGNhcmRzLmZvckVhY2goY2FyZCA9PiB7XHJcbiAgICAgICAgICAgIGNhcmQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgc3RhcnRNb3ZlKTtcclxuICAgICAgICAgICAgY2FyZC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW91dCcsIHN0b3BNb3ZlKTtcclxuICAgICAgICAgICAgZnVuY3Rpb24gc3RhcnRNb3ZlIChlKXtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGhlaWdodCA9IHRoaXMub2Zmc2V0SGVpZ2h0LFxyXG4gICAgICAgICAgICAgICAgd2lkdGggPSB0aGlzLm9mZnNldFdpZHRoO1xyXG4gICAgICAgICAgICB0aGlzLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGVZKCR7KGUub2Zmc2V0WSAtIGhlaWdodCkgLyA1MH1weCkgdHJhbnNsYXRlWCgkeyhlLm9mZnNldFggLSB3aWR0aCkgLyA1MH1weClgOyAgIFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIFxyXG4gICAgICAgICAgICBmdW5jdGlvbiBzdG9wTW92ZSgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZSgwLCAwKSc7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBpZih0YWJzKXtcclxuICAgICAgICB0YWJzLmZvckVhY2godGFiID0+e1xyXG4gICAgICAgICAgICB0YWIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbihlKXtcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGlkID0gdGhpcy5kYXRhc2V0LnRhYk9wZW4sXHJcbiAgICAgICAgICAgICAgICAgICAgICBwYXJlbnRCbG9jayA9IHRoaXMuY2xvc2VzdCgnLnRhYnMtd3JhcHBlcicpLCAgXHJcbiAgICAgICAgICAgICAgICAgICAgICB0YWJzQmxvY2tzID0gcGFyZW50QmxvY2sucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtdGFiXScpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgdGFic0J1dHRvbnMgPSAgcGFyZW50QmxvY2sucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtdGFiLW9wZW5dJylcclxuICAgICAgICAgICAgICAgIHRhYnNCbG9ja3MuZm9yRWFjaChibG9jayA9PntcclxuICAgICAgICAgICAgICAgICAgICBibG9jay5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB0YWJzQnV0dG9ucy5mb3JFYWNoKGJ1dHRvbiA9PntcclxuICAgICAgICAgICAgICAgICAgICBidXR0b24uY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJylcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTtcclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYFtkYXRhLXRhYj1cIiR7aWR9XCJdYCkuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgJCgnW2RhdGEtbW9kYWxdJykuaXppTW9kYWwoKTtcclxuICAgICQoJ1tkYXRhLW1vZGFsLW9wZW5dJykub24oJ2NsaWNrJywgZnVuY3Rpb24oZSl7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIGNvbnN0IGlkID0gJCh0aGlzKS5hdHRyKCdkYXRhLW1vZGFsLW9wZW4nKTtcclxuICAgICAgICBjb25zb2xlLmxvZyhpZClcclxuICAgICAgICAkKGBbZGF0YS1tb2RhbD0ke2lkfV1gKS5pemlNb2RhbCgnb3BlbicpO1xyXG5cclxuICAgIH0pO1xyXG4gICAgJCgnLmZpbHRlci1yYW5nZScpLmVhY2goZnVuY3Rpb24oaSwgZWxlbSl7XHJcbiAgICAgICAgY29uc3QgcmFuZ2UgPSAkKGVsZW0pLmZpbmQoJy5qcy1yYW5nZS1mcm9tLXRvJyksXHJcbiAgICAgICAgICAgICAgaW5wdXRGcm9tID0gJChlbGVtKS5maW5kKCdbZGF0YS1mcm9tXScpLFxyXG4gICAgICAgICAgICAgIGlucHV0VG8gPSAkKGVsZW0pLmZpbmQoJ1tkYXRhLXRvXScpXHJcbiAgICAgICAgJChyYW5nZSkuaW9uUmFuZ2VTbGlkZXIoe1xyXG4gICAgICAgICAgICBtaW46ICQoJy5qcy1yYW5nZS1mcm9tLXRvJykuZGF0YSgnbWluJyksXHJcbiAgICAgICAgICAgIG1heDogJCgnLmpzLXJhbmdlLWZyb20tdG8nKS5kYXRhKCdtYXgnKSxcclxuICAgICAgICAgICAgZnJvbTogJCgnLmpzLXJhbmdlLWZyb20tdG8nKS5kYXRhKCdmcm9tJyksXHJcbiAgICAgICAgICAgIHRvOiAkKCcuanMtcmFuZ2UtZnJvbS10bycpLmRhdGEoJ3RvJyksXHJcbiAgICAgICAgICAgIHR5cGU6ICdkb3VibGUnLFxyXG4gICAgICAgICAgICBvbkNoYW5nZTogZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICQoaW5wdXRUbykudmFsKGRhdGEudG9fcHJldHR5KTtcclxuICAgICAgICAgICAgICAgICQoaW5wdXRGcm9tKS52YWwoZGF0YS5mcm9tX3ByZXR0eSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pXHJcbiAgICAkKCcuZmlsdGVyLWJsb2NrX190aXRsZScpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgJCh0aGlzKS50b2dnbGVDbGFzcygnYWN0aXZlJyk7XHJcbiAgICAgICAgJCh0aGlzKS5jbG9zZXN0KCcuZmlsdGVyLWJsb2NrJykuZmluZCgnLmZpbHRlci1ibG9ja19fY29udGVudCcpLnNsaWRlVG9nZ2xlKCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAkKCcuc2VsZWN0JykubmljZVNlbGVjdCgpO1xyXG5cclxuICAgICQoJy5zbGlkZXInKS5lYWNoKGZ1bmN0aW9uKGksIHNsaWRlcil7XHJcbiAgICAgICAgY29uc3Qgc2xpZGVzVG9TaG93ID0gK3NsaWRlci5kYXRhc2V0LmNvdW50LFxyXG4gICAgICAgICAgICAgICAgc2xpZGVzID0gJChzbGlkZXIpLmZpbmQoJy5zbGlkZXJfX2xpc3QnKSxcclxuICAgICAgICAgICAgICAgIHByZXZBcnJvdyA9ICQoc2xpZGVyKS5maW5kKCdbZGF0YS1zbGlkZXItYXJyb3c9XCJwcmV2XCJdJyksXHJcbiAgICAgICAgICAgICAgICBuZXh0QXJyb3cgPSAkKHNsaWRlcikuZmluZCgnW2RhdGEtc2xpZGVyLWFycm93PVwibmV4dFwiXScpO1xyXG4gICAgICAgIHNsaWRlcy5zbGljayh7XHJcbiAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogc2xpZGVzVG9TaG93LFxyXG4gICAgICAgICAgICBwcmV2QXJyb3c6IHByZXZBcnJvdyxcclxuICAgICAgICAgICAgbmV4dEFycm93OiBuZXh0QXJyb3csXHJcbiAgICAgICAgICAgIHJlc3BvbnNpdmU6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgYnJlYWtwb2ludDogMTYwMCxcclxuICAgICAgICAgICAgICAgICAgc2V0dGluZ3M6IHtcclxuICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Nob3c6IHNsaWRlc1RvU2hvdyAtIDEsXHJcbiAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtwb2ludDogMTQ0MCxcclxuICAgICAgICAgICAgICAgICAgICBzZXR0aW5nczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TaG93OiBzbGlkZXNUb1Nob3cgLSAyLFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtwb2ludDogMTAyNSxcclxuICAgICAgICAgICAgICAgICAgICBzZXR0aW5nczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXJpYWJsZVdpZHRoOiB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIF1cclxuICAgICAgICB9KSAgICAgICAgXHJcbiAgICB9KTtcclxuXHJcbiAgICAkKCdbZGF0YS1maWx0ZXItdG9nZ2xlXScpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgJCgnLmZpbHRlcl9fd3JhcHBlcicpLnNsaWRlVG9nZ2xlKCk7XHJcbiAgICB9KTtcclxuXHJcbn0pO1xyXG4iXX0=
